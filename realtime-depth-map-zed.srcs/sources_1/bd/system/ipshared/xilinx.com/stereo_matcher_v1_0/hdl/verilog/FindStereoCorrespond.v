// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module FindStereoCorrespond (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        rows,
        cols,
        p_left_0_rows_V_i_i_c_i_din,
        p_left_0_rows_V_i_i_c_i_full_n,
        p_left_0_rows_V_i_i_c_i_write,
        p_left_0_cols_V_i_i_c_i_din,
        p_left_0_cols_V_i_i_c_i_full_n,
        p_left_0_cols_V_i_i_c_i_write,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] rows;
input  [15:0] cols;
output  [9:0] p_left_0_rows_V_i_i_c_i_din;
input   p_left_0_rows_V_i_i_c_i_full_n;
output   p_left_0_rows_V_i_i_c_i_write;
output  [10:0] p_left_0_cols_V_i_i_c_i_din;
input   p_left_0_cols_V_i_i_c_i_full_n;
output   p_left_0_cols_V_i_i_c_i_write;
output  [11:0] ap_return_0;
output  [11:0] ap_return_1;
output  [11:0] ap_return_2;
output  [11:0] ap_return_3;

reg ap_done;
reg ap_idle;
reg start_write;
reg p_left_0_rows_V_i_i_c_i_write;
reg p_left_0_cols_V_i_i_c_i_write;
reg[11:0] ap_return_0;
reg[11:0] ap_return_1;
reg[11:0] ap_return_2;
reg[11:0] ap_return_3;

reg    real_start;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    start_once_reg;
reg    p_left_0_rows_V_i_i_c_i_blk_n;
reg    p_left_0_cols_V_i_i_c_i_blk_n;
reg    ap_block_state1;
wire   [9:0] left_sobel_rows_V_fu_54_p1;
wire   [10:0] left_sobel_cols_V_fu_59_p1;
wire   [11:0] left_rows_V_cast1_i_s_fu_68_p1;
wire   [11:0] left_cols_V_cast2_i_s_fu_64_p1;
reg   [11:0] ap_return_0_preg;
reg   [11:0] ap_return_1_preg;
reg   [11:0] ap_return_2_preg;
reg   [11:0] ap_return_3_preg;
reg   [0:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 start_once_reg = 1'b0;
#0 ap_return_0_preg = 12'd0;
#0 ap_return_1_preg = 12'd0;
#0 ap_return_2_preg = 12'd0;
#0 ap_return_3_preg = 12'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (1'b0 == p_left_0_rows_V_i_i_c_i_full_n) | (1'b0 == p_left_0_cols_V_i_i_c_i_full_n) | (ap_done_reg == 1'b1)))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_0_preg[0] <= 1'b0;
        ap_return_0_preg[1] <= 1'b0;
        ap_return_0_preg[2] <= 1'b0;
        ap_return_0_preg[3] <= 1'b0;
        ap_return_0_preg[4] <= 1'b0;
        ap_return_0_preg[5] <= 1'b0;
        ap_return_0_preg[6] <= 1'b0;
        ap_return_0_preg[7] <= 1'b0;
        ap_return_0_preg[8] <= 1'b0;
        ap_return_0_preg[9] <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (1'b0 == p_left_0_rows_V_i_i_c_i_full_n) | (1'b0 == p_left_0_cols_V_i_i_c_i_full_n) | (ap_done_reg == 1'b1)))) begin
                        ap_return_0_preg[9 : 0] <= left_rows_V_cast1_i_s_fu_68_p1[9 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_1_preg[0] <= 1'b0;
        ap_return_1_preg[1] <= 1'b0;
        ap_return_1_preg[2] <= 1'b0;
        ap_return_1_preg[3] <= 1'b0;
        ap_return_1_preg[4] <= 1'b0;
        ap_return_1_preg[5] <= 1'b0;
        ap_return_1_preg[6] <= 1'b0;
        ap_return_1_preg[7] <= 1'b0;
        ap_return_1_preg[8] <= 1'b0;
        ap_return_1_preg[9] <= 1'b0;
        ap_return_1_preg[10] <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (1'b0 == p_left_0_rows_V_i_i_c_i_full_n) | (1'b0 == p_left_0_cols_V_i_i_c_i_full_n) | (ap_done_reg == 1'b1)))) begin
                        ap_return_1_preg[10 : 0] <= left_cols_V_cast2_i_s_fu_64_p1[10 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_2_preg[0] <= 1'b0;
        ap_return_2_preg[1] <= 1'b0;
        ap_return_2_preg[2] <= 1'b0;
        ap_return_2_preg[3] <= 1'b0;
        ap_return_2_preg[4] <= 1'b0;
        ap_return_2_preg[5] <= 1'b0;
        ap_return_2_preg[6] <= 1'b0;
        ap_return_2_preg[7] <= 1'b0;
        ap_return_2_preg[8] <= 1'b0;
        ap_return_2_preg[9] <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (1'b0 == p_left_0_rows_V_i_i_c_i_full_n) | (1'b0 == p_left_0_cols_V_i_i_c_i_full_n) | (ap_done_reg == 1'b1)))) begin
                        ap_return_2_preg[9 : 0] <= left_rows_V_cast1_i_s_fu_68_p1[9 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_3_preg[0] <= 1'b0;
        ap_return_3_preg[1] <= 1'b0;
        ap_return_3_preg[2] <= 1'b0;
        ap_return_3_preg[3] <= 1'b0;
        ap_return_3_preg[4] <= 1'b0;
        ap_return_3_preg[5] <= 1'b0;
        ap_return_3_preg[6] <= 1'b0;
        ap_return_3_preg[7] <= 1'b0;
        ap_return_3_preg[8] <= 1'b0;
        ap_return_3_preg[9] <= 1'b0;
        ap_return_3_preg[10] <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (1'b0 == p_left_0_rows_V_i_i_c_i_full_n) | (1'b0 == p_left_0_cols_V_i_i_c_i_full_n) | (ap_done_reg == 1'b1)))) begin
                        ap_return_3_preg[10 : 0] <= left_cols_V_cast2_i_s_fu_64_p1[10 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if ((1'b1 == real_start)) begin
            start_once_reg <= 1'b1;
        end
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (1'b0 == p_left_0_rows_V_i_i_c_i_full_n) | (1'b0 == p_left_0_cols_V_i_i_c_i_full_n) | (ap_done_reg == 1'b1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b0 == real_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (1'b0 == p_left_0_rows_V_i_i_c_i_full_n) | (1'b0 == p_left_0_cols_V_i_i_c_i_full_n) | (ap_done_reg == 1'b1)))) begin
        ap_return_0 = left_rows_V_cast1_i_s_fu_68_p1;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (1'b0 == p_left_0_rows_V_i_i_c_i_full_n) | (1'b0 == p_left_0_cols_V_i_i_c_i_full_n) | (ap_done_reg == 1'b1)))) begin
        ap_return_1 = left_cols_V_cast2_i_s_fu_64_p1;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (1'b0 == p_left_0_rows_V_i_i_c_i_full_n) | (1'b0 == p_left_0_cols_V_i_i_c_i_full_n) | (ap_done_reg == 1'b1)))) begin
        ap_return_2 = left_rows_V_cast1_i_s_fu_68_p1;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (1'b0 == p_left_0_rows_V_i_i_c_i_full_n) | (1'b0 == p_left_0_cols_V_i_i_c_i_full_n) | (ap_done_reg == 1'b1)))) begin
        ap_return_3 = left_cols_V_cast2_i_s_fu_64_p1;
    end else begin
        ap_return_3 = ap_return_3_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (1'b0 == p_left_0_rows_V_i_i_c_i_full_n) | (1'b0 == p_left_0_cols_V_i_i_c_i_full_n) | (ap_done_reg == 1'b1)))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        p_left_0_cols_V_i_i_c_i_blk_n = p_left_0_cols_V_i_i_c_i_full_n;
    end else begin
        p_left_0_cols_V_i_i_c_i_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (1'b0 == p_left_0_rows_V_i_i_c_i_full_n) | (1'b0 == p_left_0_cols_V_i_i_c_i_full_n) | (ap_done_reg == 1'b1)))) begin
        p_left_0_cols_V_i_i_c_i_write = 1'b1;
    end else begin
        p_left_0_cols_V_i_i_c_i_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        p_left_0_rows_V_i_i_c_i_blk_n = p_left_0_rows_V_i_i_c_i_full_n;
    end else begin
        p_left_0_rows_V_i_i_c_i_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (1'b0 == p_left_0_rows_V_i_i_c_i_full_n) | (1'b0 == p_left_0_cols_V_i_i_c_i_full_n) | (ap_done_reg == 1'b1)))) begin
        p_left_0_rows_V_i_i_c_i_write = 1'b1;
    end else begin
        p_left_0_rows_V_i_i_c_i_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == start_full_n)) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((1'b1 == real_start) & ((1'b1 == internal_ap_ready) | (1'b0 == start_once_reg)))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((1'b0 == real_start) | (1'b0 == p_left_0_rows_V_i_i_c_i_full_n) | (1'b0 == p_left_0_cols_V_i_i_c_i_full_n) | (ap_done_reg == 1'b1));
end

assign ap_ready = internal_ap_ready;

assign left_cols_V_cast2_i_s_fu_64_p1 = left_sobel_cols_V_fu_59_p1;

assign left_rows_V_cast1_i_s_fu_68_p1 = left_sobel_rows_V_fu_54_p1;

assign left_sobel_cols_V_fu_59_p1 = cols[10:0];

assign left_sobel_rows_V_fu_54_p1 = rows[9:0];

assign p_left_0_cols_V_i_i_c_i_din = left_sobel_cols_V_fu_59_p1;

assign p_left_0_rows_V_i_i_c_i_din = left_sobel_rows_V_fu_54_p1;

assign start_out = real_start;

always @ (posedge ap_clk) begin
    ap_return_0_preg[11:10] <= 2'b00;
    ap_return_1_preg[11] <= 1'b0;
    ap_return_2_preg[11:10] <= 2'b00;
    ap_return_3_preg[11] <= 1'b0;
end

endmodule //FindStereoCorrespond
