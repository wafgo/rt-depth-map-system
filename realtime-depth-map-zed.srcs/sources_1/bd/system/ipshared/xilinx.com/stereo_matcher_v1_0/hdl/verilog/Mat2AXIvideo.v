// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Mat2AXIvideo (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        rows,
        cols,
        disp_img_data_stream_dout,
        disp_img_data_stream_empty_n,
        disp_img_data_stream_read,
        disp_out_TDATA,
        disp_out_TVALID,
        disp_out_TREADY,
        disp_out_TKEEP,
        disp_out_TSTRB,
        disp_out_TUSER,
        disp_out_TLAST,
        disp_out_TID,
        disp_out_TDEST
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state6 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] rows;
input  [15:0] cols;
input  [15:0] disp_img_data_stream_dout;
input   disp_img_data_stream_empty_n;
output   disp_img_data_stream_read;
output  [15:0] disp_out_TDATA;
output   disp_out_TVALID;
input   disp_out_TREADY;
output  [1:0] disp_out_TKEEP;
output  [1:0] disp_out_TSTRB;
output  [0:0] disp_out_TUSER;
output  [0:0] disp_out_TLAST;
output  [0:0] disp_out_TID;
output  [0:0] disp_out_TDEST;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg disp_img_data_stream_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [15:0] disp_out_V_data_V_1_data_out;
reg    disp_out_V_data_V_1_vld_in;
wire    disp_out_V_data_V_1_vld_out;
wire    disp_out_V_data_V_1_ack_in;
wire    disp_out_V_data_V_1_ack_out;
reg   [15:0] disp_out_V_data_V_1_payload_A;
reg   [15:0] disp_out_V_data_V_1_payload_B;
reg    disp_out_V_data_V_1_sel_rd;
reg    disp_out_V_data_V_1_sel_wr;
wire    disp_out_V_data_V_1_sel;
wire    disp_out_V_data_V_1_load_A;
wire    disp_out_V_data_V_1_load_B;
reg   [1:0] disp_out_V_data_V_1_state;
wire    disp_out_V_data_V_1_state_cmp_full;
wire   [1:0] disp_out_V_keep_V_1_data_out;
reg    disp_out_V_keep_V_1_vld_in;
wire    disp_out_V_keep_V_1_vld_out;
wire    disp_out_V_keep_V_1_ack_in;
wire    disp_out_V_keep_V_1_ack_out;
reg    disp_out_V_keep_V_1_sel_rd;
wire    disp_out_V_keep_V_1_sel;
reg   [1:0] disp_out_V_keep_V_1_state;
wire   [1:0] disp_out_V_strb_V_1_data_out;
reg    disp_out_V_strb_V_1_vld_in;
wire    disp_out_V_strb_V_1_vld_out;
wire    disp_out_V_strb_V_1_ack_in;
wire    disp_out_V_strb_V_1_ack_out;
reg    disp_out_V_strb_V_1_sel_rd;
wire    disp_out_V_strb_V_1_sel;
reg   [1:0] disp_out_V_strb_V_1_state;
reg   [0:0] disp_out_V_user_V_1_data_out;
reg    disp_out_V_user_V_1_vld_in;
wire    disp_out_V_user_V_1_vld_out;
wire    disp_out_V_user_V_1_ack_in;
wire    disp_out_V_user_V_1_ack_out;
reg   [0:0] disp_out_V_user_V_1_payload_A;
reg   [0:0] disp_out_V_user_V_1_payload_B;
reg    disp_out_V_user_V_1_sel_rd;
reg    disp_out_V_user_V_1_sel_wr;
wire    disp_out_V_user_V_1_sel;
wire    disp_out_V_user_V_1_load_A;
wire    disp_out_V_user_V_1_load_B;
reg   [1:0] disp_out_V_user_V_1_state;
wire    disp_out_V_user_V_1_state_cmp_full;
reg   [0:0] disp_out_V_last_V_1_data_out;
reg    disp_out_V_last_V_1_vld_in;
wire    disp_out_V_last_V_1_vld_out;
wire    disp_out_V_last_V_1_ack_in;
wire    disp_out_V_last_V_1_ack_out;
reg   [0:0] disp_out_V_last_V_1_payload_A;
reg   [0:0] disp_out_V_last_V_1_payload_B;
reg    disp_out_V_last_V_1_sel_rd;
reg    disp_out_V_last_V_1_sel_wr;
wire    disp_out_V_last_V_1_sel;
wire    disp_out_V_last_V_1_load_A;
wire    disp_out_V_last_V_1_load_B;
reg   [1:0] disp_out_V_last_V_1_state;
wire    disp_out_V_last_V_1_state_cmp_full;
wire   [0:0] disp_out_V_id_V_1_data_out;
reg    disp_out_V_id_V_1_vld_in;
wire    disp_out_V_id_V_1_vld_out;
wire    disp_out_V_id_V_1_ack_in;
wire    disp_out_V_id_V_1_ack_out;
reg    disp_out_V_id_V_1_sel_rd;
wire    disp_out_V_id_V_1_sel;
reg   [1:0] disp_out_V_id_V_1_state;
wire   [0:0] disp_out_V_dest_V_1_data_out;
reg    disp_out_V_dest_V_1_vld_in;
wire    disp_out_V_dest_V_1_vld_out;
wire    disp_out_V_dest_V_1_ack_in;
wire    disp_out_V_dest_V_1_ack_out;
reg    disp_out_V_dest_V_1_sel_rd;
wire    disp_out_V_dest_V_1_sel;
reg   [1:0] disp_out_V_dest_V_1_state;
reg    disp_img_data_stream_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_i_i_reg_254;
reg    disp_out_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] ap_reg_pp0_iter1_exitcond_i_i_reg_254;
reg   [10:0] p_3_i_i_reg_157;
wire   [9:0] tmp_fu_168_p1;
reg    ap_block_state1;
wire   [10:0] tmp_115_fu_172_p1;
wire   [10:0] r_V_fu_176_p2;
wire   [0:0] exitcond3_i_i_fu_187_p2;
wire    ap_CS_fsm_state2;
reg    ap_block_state2;
wire   [9:0] i_V_fu_192_p2;
reg   [9:0] i_V_reg_249;
wire   [0:0] exitcond_i_i_fu_198_p2;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_state4_io;
wire    ap_block_state5_pp0_stage0_iter2;
reg    ap_block_state5_io;
reg    ap_block_pp0_stage0_11001;
wire   [10:0] j_V_fu_203_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] axi_last_V_fu_209_p2;
reg   [0:0] axi_last_V_reg_263;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg   [9:0] p_i_i_reg_146;
wire    ap_CS_fsm_state6;
reg   [0:0] tmp_user_V_fu_94;
reg    ap_block_pp0_stage0_01001;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 disp_out_V_data_V_1_sel_rd = 1'b0;
#0 disp_out_V_data_V_1_sel_wr = 1'b0;
#0 disp_out_V_data_V_1_state = 2'd0;
#0 disp_out_V_keep_V_1_sel_rd = 1'b0;
#0 disp_out_V_keep_V_1_state = 2'd0;
#0 disp_out_V_strb_V_1_sel_rd = 1'b0;
#0 disp_out_V_strb_V_1_state = 2'd0;
#0 disp_out_V_user_V_1_sel_rd = 1'b0;
#0 disp_out_V_user_V_1_sel_wr = 1'b0;
#0 disp_out_V_user_V_1_state = 2'd0;
#0 disp_out_V_last_V_1_sel_rd = 1'b0;
#0 disp_out_V_last_V_1_sel_wr = 1'b0;
#0 disp_out_V_last_V_1_state = 2'd0;
#0 disp_out_V_id_V_1_sel_rd = 1'b0;
#0 disp_out_V_id_V_1_state = 2'd0;
#0 disp_out_V_dest_V_1_sel_rd = 1'b0;
#0 disp_out_V_dest_V_1_state = 2'd0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & ~((1'b0 == disp_out_V_data_V_1_ack_in) | (1'b0 == disp_out_V_keep_V_1_ack_in) | (1'b0 == disp_out_V_strb_V_1_ack_in) | (1'b0 == disp_out_V_user_V_1_ack_in) | (1'b0 == disp_out_V_last_V_1_ack_in) | (1'b0 == disp_out_V_id_V_1_ack_in) | (1'b0 == disp_out_V_dest_V_1_ack_in)) & (1'd1 == exitcond3_i_i_fu_187_p2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_subdone == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & ~((1'b0 == disp_out_V_data_V_1_ack_in) | (1'b0 == disp_out_V_keep_V_1_ack_in) | (1'b0 == disp_out_V_strb_V_1_ack_in) | (1'b0 == disp_out_V_user_V_1_ack_in) | (1'b0 == disp_out_V_last_V_1_ack_in) | (1'b0 == disp_out_V_id_V_1_ack_in) | (1'b0 == disp_out_V_dest_V_1_ack_in)) & (1'd0 == exitcond3_i_i_fu_187_p2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state3 ^ 1'b1);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b1 == ap_CS_fsm_state2) & ~((1'b0 == disp_out_V_data_V_1_ack_in) | (1'b0 == disp_out_V_keep_V_1_ack_in) | (1'b0 == disp_out_V_strb_V_1_ack_in) | (1'b0 == disp_out_V_user_V_1_ack_in) | (1'b0 == disp_out_V_last_V_1_ack_in) | (1'b0 == disp_out_V_id_V_1_ack_in) | (1'b0 == disp_out_V_dest_V_1_ack_in)) & (1'd0 == exitcond3_i_i_fu_187_p2))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        disp_out_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == disp_out_V_data_V_1_ack_out) & (1'b1 == disp_out_V_data_V_1_vld_out))) begin
            disp_out_V_data_V_1_sel_rd <= ~disp_out_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        disp_out_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == disp_out_V_data_V_1_vld_in) & (1'b1 == disp_out_V_data_V_1_ack_in))) begin
            disp_out_V_data_V_1_sel_wr <= ~disp_out_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        disp_out_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == disp_out_V_data_V_1_vld_in) & (1'b1 == disp_out_V_data_V_1_ack_out) & (disp_out_V_data_V_1_state == 2'd3)) | ((1'b0 == disp_out_V_data_V_1_vld_in) & (disp_out_V_data_V_1_state == 2'd2)))) begin
            disp_out_V_data_V_1_state <= 2'd2;
        end else if ((((1'b1 == disp_out_V_data_V_1_vld_in) & (1'b0 == disp_out_V_data_V_1_ack_out) & (disp_out_V_data_V_1_state == 2'd3)) | ((1'b0 == disp_out_V_data_V_1_ack_out) & (disp_out_V_data_V_1_state == 2'd1)))) begin
            disp_out_V_data_V_1_state <= 2'd1;
        end else if ((((1'b1 == disp_out_V_data_V_1_vld_in) & (disp_out_V_data_V_1_state == 2'd2)) | ((1'b1 == disp_out_V_data_V_1_ack_out) & (disp_out_V_data_V_1_state == 2'd1)) | ((disp_out_V_data_V_1_state == 2'd3) & ~((1'b1 == disp_out_V_data_V_1_vld_in) & (1'b0 == disp_out_V_data_V_1_ack_out)) & ~((1'b0 == disp_out_V_data_V_1_vld_in) & (1'b1 == disp_out_V_data_V_1_ack_out))))) begin
            disp_out_V_data_V_1_state <= 2'd3;
        end else begin
            disp_out_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        disp_out_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == disp_out_V_dest_V_1_ack_out) & (1'b1 == disp_out_V_dest_V_1_vld_out))) begin
            disp_out_V_dest_V_1_sel_rd <= ~disp_out_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        disp_out_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == disp_out_V_dest_V_1_vld_in) & (1'b1 == disp_out_V_dest_V_1_ack_out) & (2'd3 == disp_out_V_dest_V_1_state)) | ((1'b0 == disp_out_V_dest_V_1_vld_in) & (2'd2 == disp_out_V_dest_V_1_state)))) begin
            disp_out_V_dest_V_1_state <= 2'd2;
        end else if ((((1'b1 == disp_out_V_dest_V_1_vld_in) & (1'b0 == disp_out_V_dest_V_1_ack_out) & (2'd3 == disp_out_V_dest_V_1_state)) | ((1'b0 == disp_out_V_dest_V_1_ack_out) & (2'd1 == disp_out_V_dest_V_1_state)))) begin
            disp_out_V_dest_V_1_state <= 2'd1;
        end else if ((((1'b1 == disp_out_V_dest_V_1_vld_in) & (2'd2 == disp_out_V_dest_V_1_state)) | ((1'b1 == disp_out_V_dest_V_1_ack_out) & (2'd1 == disp_out_V_dest_V_1_state)) | ((2'd3 == disp_out_V_dest_V_1_state) & ~((1'b1 == disp_out_V_dest_V_1_vld_in) & (1'b0 == disp_out_V_dest_V_1_ack_out)) & ~((1'b0 == disp_out_V_dest_V_1_vld_in) & (1'b1 == disp_out_V_dest_V_1_ack_out))))) begin
            disp_out_V_dest_V_1_state <= 2'd3;
        end else begin
            disp_out_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        disp_out_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == disp_out_V_id_V_1_ack_out) & (1'b1 == disp_out_V_id_V_1_vld_out))) begin
            disp_out_V_id_V_1_sel_rd <= ~disp_out_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        disp_out_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == disp_out_V_id_V_1_vld_in) & (1'b1 == disp_out_V_id_V_1_ack_out) & (2'd3 == disp_out_V_id_V_1_state)) | ((1'b0 == disp_out_V_id_V_1_vld_in) & (2'd2 == disp_out_V_id_V_1_state)))) begin
            disp_out_V_id_V_1_state <= 2'd2;
        end else if ((((1'b1 == disp_out_V_id_V_1_vld_in) & (1'b0 == disp_out_V_id_V_1_ack_out) & (2'd3 == disp_out_V_id_V_1_state)) | ((1'b0 == disp_out_V_id_V_1_ack_out) & (2'd1 == disp_out_V_id_V_1_state)))) begin
            disp_out_V_id_V_1_state <= 2'd1;
        end else if ((((1'b1 == disp_out_V_id_V_1_vld_in) & (2'd2 == disp_out_V_id_V_1_state)) | ((1'b1 == disp_out_V_id_V_1_ack_out) & (2'd1 == disp_out_V_id_V_1_state)) | ((2'd3 == disp_out_V_id_V_1_state) & ~((1'b1 == disp_out_V_id_V_1_vld_in) & (1'b0 == disp_out_V_id_V_1_ack_out)) & ~((1'b0 == disp_out_V_id_V_1_vld_in) & (1'b1 == disp_out_V_id_V_1_ack_out))))) begin
            disp_out_V_id_V_1_state <= 2'd3;
        end else begin
            disp_out_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        disp_out_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == disp_out_V_keep_V_1_ack_out) & (1'b1 == disp_out_V_keep_V_1_vld_out))) begin
            disp_out_V_keep_V_1_sel_rd <= ~disp_out_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        disp_out_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == disp_out_V_keep_V_1_vld_in) & (1'b1 == disp_out_V_keep_V_1_ack_out) & (2'd3 == disp_out_V_keep_V_1_state)) | ((1'b0 == disp_out_V_keep_V_1_vld_in) & (2'd2 == disp_out_V_keep_V_1_state)))) begin
            disp_out_V_keep_V_1_state <= 2'd2;
        end else if ((((1'b1 == disp_out_V_keep_V_1_vld_in) & (1'b0 == disp_out_V_keep_V_1_ack_out) & (2'd3 == disp_out_V_keep_V_1_state)) | ((1'b0 == disp_out_V_keep_V_1_ack_out) & (2'd1 == disp_out_V_keep_V_1_state)))) begin
            disp_out_V_keep_V_1_state <= 2'd1;
        end else if ((((1'b1 == disp_out_V_keep_V_1_vld_in) & (2'd2 == disp_out_V_keep_V_1_state)) | ((1'b1 == disp_out_V_keep_V_1_ack_out) & (2'd1 == disp_out_V_keep_V_1_state)) | ((2'd3 == disp_out_V_keep_V_1_state) & ~((1'b1 == disp_out_V_keep_V_1_vld_in) & (1'b0 == disp_out_V_keep_V_1_ack_out)) & ~((1'b0 == disp_out_V_keep_V_1_vld_in) & (1'b1 == disp_out_V_keep_V_1_ack_out))))) begin
            disp_out_V_keep_V_1_state <= 2'd3;
        end else begin
            disp_out_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        disp_out_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == disp_out_V_last_V_1_ack_out) & (1'b1 == disp_out_V_last_V_1_vld_out))) begin
            disp_out_V_last_V_1_sel_rd <= ~disp_out_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        disp_out_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == disp_out_V_last_V_1_vld_in) & (1'b1 == disp_out_V_last_V_1_ack_in))) begin
            disp_out_V_last_V_1_sel_wr <= ~disp_out_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        disp_out_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == disp_out_V_last_V_1_vld_in) & (1'b1 == disp_out_V_last_V_1_ack_out) & (2'd3 == disp_out_V_last_V_1_state)) | ((1'b0 == disp_out_V_last_V_1_vld_in) & (2'd2 == disp_out_V_last_V_1_state)))) begin
            disp_out_V_last_V_1_state <= 2'd2;
        end else if ((((1'b1 == disp_out_V_last_V_1_vld_in) & (1'b0 == disp_out_V_last_V_1_ack_out) & (2'd3 == disp_out_V_last_V_1_state)) | ((1'b0 == disp_out_V_last_V_1_ack_out) & (2'd1 == disp_out_V_last_V_1_state)))) begin
            disp_out_V_last_V_1_state <= 2'd1;
        end else if ((((1'b1 == disp_out_V_last_V_1_vld_in) & (2'd2 == disp_out_V_last_V_1_state)) | ((1'b1 == disp_out_V_last_V_1_ack_out) & (2'd1 == disp_out_V_last_V_1_state)) | ((2'd3 == disp_out_V_last_V_1_state) & ~((1'b1 == disp_out_V_last_V_1_vld_in) & (1'b0 == disp_out_V_last_V_1_ack_out)) & ~((1'b0 == disp_out_V_last_V_1_vld_in) & (1'b1 == disp_out_V_last_V_1_ack_out))))) begin
            disp_out_V_last_V_1_state <= 2'd3;
        end else begin
            disp_out_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        disp_out_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == disp_out_V_strb_V_1_ack_out) & (1'b1 == disp_out_V_strb_V_1_vld_out))) begin
            disp_out_V_strb_V_1_sel_rd <= ~disp_out_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        disp_out_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == disp_out_V_strb_V_1_vld_in) & (1'b1 == disp_out_V_strb_V_1_ack_out) & (2'd3 == disp_out_V_strb_V_1_state)) | ((1'b0 == disp_out_V_strb_V_1_vld_in) & (2'd2 == disp_out_V_strb_V_1_state)))) begin
            disp_out_V_strb_V_1_state <= 2'd2;
        end else if ((((1'b1 == disp_out_V_strb_V_1_vld_in) & (1'b0 == disp_out_V_strb_V_1_ack_out) & (2'd3 == disp_out_V_strb_V_1_state)) | ((1'b0 == disp_out_V_strb_V_1_ack_out) & (2'd1 == disp_out_V_strb_V_1_state)))) begin
            disp_out_V_strb_V_1_state <= 2'd1;
        end else if ((((1'b1 == disp_out_V_strb_V_1_vld_in) & (2'd2 == disp_out_V_strb_V_1_state)) | ((1'b1 == disp_out_V_strb_V_1_ack_out) & (2'd1 == disp_out_V_strb_V_1_state)) | ((2'd3 == disp_out_V_strb_V_1_state) & ~((1'b1 == disp_out_V_strb_V_1_vld_in) & (1'b0 == disp_out_V_strb_V_1_ack_out)) & ~((1'b0 == disp_out_V_strb_V_1_vld_in) & (1'b1 == disp_out_V_strb_V_1_ack_out))))) begin
            disp_out_V_strb_V_1_state <= 2'd3;
        end else begin
            disp_out_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        disp_out_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == disp_out_V_user_V_1_ack_out) & (1'b1 == disp_out_V_user_V_1_vld_out))) begin
            disp_out_V_user_V_1_sel_rd <= ~disp_out_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        disp_out_V_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == disp_out_V_user_V_1_vld_in) & (1'b1 == disp_out_V_user_V_1_ack_in))) begin
            disp_out_V_user_V_1_sel_wr <= ~disp_out_V_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        disp_out_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == disp_out_V_user_V_1_vld_in) & (1'b1 == disp_out_V_user_V_1_ack_out) & (2'd3 == disp_out_V_user_V_1_state)) | ((1'b0 == disp_out_V_user_V_1_vld_in) & (2'd2 == disp_out_V_user_V_1_state)))) begin
            disp_out_V_user_V_1_state <= 2'd2;
        end else if ((((1'b1 == disp_out_V_user_V_1_vld_in) & (1'b0 == disp_out_V_user_V_1_ack_out) & (2'd3 == disp_out_V_user_V_1_state)) | ((1'b0 == disp_out_V_user_V_1_ack_out) & (2'd1 == disp_out_V_user_V_1_state)))) begin
            disp_out_V_user_V_1_state <= 2'd1;
        end else if ((((1'b1 == disp_out_V_user_V_1_vld_in) & (2'd2 == disp_out_V_user_V_1_state)) | ((1'b1 == disp_out_V_user_V_1_ack_out) & (2'd1 == disp_out_V_user_V_1_state)) | ((2'd3 == disp_out_V_user_V_1_state) & ~((1'b1 == disp_out_V_user_V_1_vld_in) & (1'b0 == disp_out_V_user_V_1_ack_out)) & ~((1'b0 == disp_out_V_user_V_1_vld_in) & (1'b1 == disp_out_V_user_V_1_ack_out))))) begin
            disp_out_V_user_V_1_state <= 2'd3;
        end else begin
            disp_out_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_i_i_fu_198_p2))) begin
        p_3_i_i_reg_157 <= j_V_fu_203_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & ~((1'b0 == disp_out_V_data_V_1_ack_in) | (1'b0 == disp_out_V_keep_V_1_ack_in) | (1'b0 == disp_out_V_strb_V_1_ack_in) | (1'b0 == disp_out_V_user_V_1_ack_in) | (1'b0 == disp_out_V_last_V_1_ack_in) | (1'b0 == disp_out_V_id_V_1_ack_in) | (1'b0 == disp_out_V_dest_V_1_ack_in)) & (1'd0 == exitcond3_i_i_fu_187_p2))) begin
        p_3_i_i_reg_157 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        p_i_i_reg_146 <= 10'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        p_i_i_reg_146 <= i_V_reg_249;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == exitcond_i_i_reg_254) & (ap_block_pp0_stage0_11001 == 1'b0))) begin
        tmp_user_V_fu_94 <= 1'd0;
    end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        tmp_user_V_fu_94 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0))) begin
        ap_reg_pp0_iter1_exitcond_i_i_reg_254 <= exitcond_i_i_reg_254;
        exitcond_i_i_reg_254 <= exitcond_i_i_fu_198_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'd0 == exitcond_i_i_fu_198_p2))) begin
        axi_last_V_reg_263 <= axi_last_V_fu_209_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == disp_out_V_data_V_1_load_A)) begin
        disp_out_V_data_V_1_payload_A <= disp_img_data_stream_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == disp_out_V_data_V_1_load_B)) begin
        disp_out_V_data_V_1_payload_B <= disp_img_data_stream_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == disp_out_V_last_V_1_load_A)) begin
        disp_out_V_last_V_1_payload_A <= axi_last_V_reg_263;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == disp_out_V_last_V_1_load_B)) begin
        disp_out_V_last_V_1_payload_B <= axi_last_V_reg_263;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == disp_out_V_user_V_1_load_A)) begin
        disp_out_V_user_V_1_payload_A <= tmp_user_V_fu_94;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == disp_out_V_user_V_1_load_B)) begin
        disp_out_V_user_V_1_payload_B <= tmp_user_V_fu_94;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~((1'b0 == disp_out_V_data_V_1_ack_in) | (1'b0 == disp_out_V_keep_V_1_ack_in) | (1'b0 == disp_out_V_strb_V_1_ack_in) | (1'b0 == disp_out_V_user_V_1_ack_in) | (1'b0 == disp_out_V_last_V_1_ack_in) | (1'b0 == disp_out_V_id_V_1_ack_in) | (1'b0 == disp_out_V_dest_V_1_ack_in)))) begin
        i_V_reg_249 <= i_V_fu_192_p2;
    end
end

always @ (*) begin
    if ((1'd1 == exitcond_i_i_fu_198_p2)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~((1'b0 == disp_out_V_data_V_1_ack_in) | (1'b0 == disp_out_V_keep_V_1_ack_in) | (1'b0 == disp_out_V_strb_V_1_ack_in) | (1'b0 == disp_out_V_user_V_1_ack_in) | (1'b0 == disp_out_V_last_V_1_ack_in) | (1'b0 == disp_out_V_id_V_1_ack_in) | (1'b0 == disp_out_V_dest_V_1_ack_in)) & (1'd1 == exitcond3_i_i_fu_187_p2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~((1'b0 == disp_out_V_data_V_1_ack_in) | (1'b0 == disp_out_V_keep_V_1_ack_in) | (1'b0 == disp_out_V_strb_V_1_ack_in) | (1'b0 == disp_out_V_user_V_1_ack_in) | (1'b0 == disp_out_V_last_V_1_ack_in) | (1'b0 == disp_out_V_id_V_1_ack_in) | (1'b0 == disp_out_V_dest_V_1_ack_in)) & (1'd1 == exitcond3_i_i_fu_187_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0 == 1'b0) & (1'd0 == exitcond_i_i_reg_254))) begin
        disp_img_data_stream_blk_n = disp_img_data_stream_empty_n;
    end else begin
        disp_img_data_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == exitcond_i_i_reg_254) & (ap_block_pp0_stage0_11001 == 1'b0))) begin
        disp_img_data_stream_read = 1'b1;
    end else begin
        disp_img_data_stream_read = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0 == 1'b0) & (1'd0 == exitcond_i_i_reg_254)) | ((ap_block_pp0_stage0 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2) & (1'd0 == ap_reg_pp0_iter1_exitcond_i_i_reg_254)))) begin
        disp_out_TDATA_blk_n = disp_out_V_data_V_1_state[1'd1];
    end else begin
        disp_out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == disp_out_V_data_V_1_sel)) begin
        disp_out_V_data_V_1_data_out = disp_out_V_data_V_1_payload_B;
    end else begin
        disp_out_V_data_V_1_data_out = disp_out_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == exitcond_i_i_reg_254) & (ap_block_pp0_stage0_11001 == 1'b0))) begin
        disp_out_V_data_V_1_vld_in = 1'b1;
    end else begin
        disp_out_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == exitcond_i_i_reg_254) & (ap_block_pp0_stage0_11001 == 1'b0))) begin
        disp_out_V_dest_V_1_vld_in = 1'b1;
    end else begin
        disp_out_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == exitcond_i_i_reg_254) & (ap_block_pp0_stage0_11001 == 1'b0))) begin
        disp_out_V_id_V_1_vld_in = 1'b1;
    end else begin
        disp_out_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == exitcond_i_i_reg_254) & (ap_block_pp0_stage0_11001 == 1'b0))) begin
        disp_out_V_keep_V_1_vld_in = 1'b1;
    end else begin
        disp_out_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == disp_out_V_last_V_1_sel)) begin
        disp_out_V_last_V_1_data_out = disp_out_V_last_V_1_payload_B;
    end else begin
        disp_out_V_last_V_1_data_out = disp_out_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == exitcond_i_i_reg_254) & (ap_block_pp0_stage0_11001 == 1'b0))) begin
        disp_out_V_last_V_1_vld_in = 1'b1;
    end else begin
        disp_out_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == exitcond_i_i_reg_254) & (ap_block_pp0_stage0_11001 == 1'b0))) begin
        disp_out_V_strb_V_1_vld_in = 1'b1;
    end else begin
        disp_out_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == disp_out_V_user_V_1_sel)) begin
        disp_out_V_user_V_1_data_out = disp_out_V_user_V_1_payload_B;
    end else begin
        disp_out_V_user_V_1_data_out = disp_out_V_user_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == exitcond_i_i_reg_254) & (ap_block_pp0_stage0_11001 == 1'b0))) begin
        disp_out_V_user_V_1_vld_in = 1'b1;
    end else begin
        disp_out_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & ~((1'b0 == disp_out_V_data_V_1_ack_in) | (1'b0 == disp_out_V_keep_V_1_ack_in) | (1'b0 == disp_out_V_strb_V_1_ack_in) | (1'b0 == disp_out_V_user_V_1_ack_in) | (1'b0 == disp_out_V_last_V_1_ack_in) | (1'b0 == disp_out_V_id_V_1_ack_in) | (1'b0 == disp_out_V_dest_V_1_ack_in)) & (1'd1 == exitcond3_i_i_fu_187_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b1 == ap_CS_fsm_state2) & ~((1'b0 == disp_out_V_data_V_1_ack_in) | (1'b0 == disp_out_V_keep_V_1_ack_in) | (1'b0 == disp_out_V_strb_V_1_ack_in) | (1'b0 == disp_out_V_user_V_1_ack_in) | (1'b0 == disp_out_V_last_V_1_ack_in) | (1'b0 == disp_out_V_id_V_1_ack_in) | (1'b0 == disp_out_V_dest_V_1_ack_in)) & (1'd0 == exitcond3_i_i_fu_187_p2))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b1 == ap_enable_reg_pp0_iter2) & (ap_block_pp0_stage0_subdone == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_subdone == 1'b0) & (1'd1 == exitcond_i_i_fu_198_p2) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b1 == ap_enable_reg_pp0_iter2) & (ap_block_pp0_stage0_subdone == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_subdone == 1'b0) & (1'd1 == exitcond_i_i_fu_198_p2) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == exitcond_i_i_reg_254) & (1'b0 == disp_img_data_stream_empty_n));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_enable_reg_pp0_iter1) & (((1'd0 == exitcond_i_i_reg_254) & (1'b0 == disp_img_data_stream_empty_n)) | (1'b1 == ap_block_state4_io))) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b1 == ap_block_state5_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_enable_reg_pp0_iter1) & (((1'd0 == exitcond_i_i_reg_254) & (1'b0 == disp_img_data_stream_empty_n)) | (1'b1 == ap_block_state4_io))) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b1 == ap_block_state5_io)));
end

always @ (*) begin
    ap_block_state1 = ((1'b0 == ap_start) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2 = ((1'b0 == disp_out_V_data_V_1_ack_in) | (1'b0 == disp_out_V_keep_V_1_ack_in) | (1'b0 == disp_out_V_strb_V_1_ack_in) | (1'b0 == disp_out_V_user_V_1_ack_in) | (1'b0 == disp_out_V_last_V_1_ack_in) | (1'b0 == disp_out_V_id_V_1_ack_in) | (1'b0 == disp_out_V_dest_V_1_ack_in));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = ((1'd0 == exitcond_i_i_reg_254) & (1'b0 == disp_out_V_data_V_1_ack_in));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((1'd0 == exitcond_i_i_reg_254) & (1'b0 == disp_img_data_stream_empty_n));
end

always @ (*) begin
    ap_block_state5_io = ((1'd0 == ap_reg_pp0_iter1_exitcond_i_i_reg_254) & (1'b0 == disp_out_V_data_V_1_ack_in));
end

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign axi_last_V_fu_209_p2 = ((p_3_i_i_reg_157 == r_V_fu_176_p2) ? 1'b1 : 1'b0);

assign disp_out_TDATA = disp_out_V_data_V_1_data_out;

assign disp_out_TDEST = disp_out_V_dest_V_1_data_out;

assign disp_out_TID = disp_out_V_id_V_1_data_out;

assign disp_out_TKEEP = disp_out_V_keep_V_1_data_out;

assign disp_out_TLAST = disp_out_V_last_V_1_data_out;

assign disp_out_TSTRB = disp_out_V_strb_V_1_data_out;

assign disp_out_TUSER = disp_out_V_user_V_1_data_out;

assign disp_out_TVALID = disp_out_V_dest_V_1_state[1'd0];

assign disp_out_V_data_V_1_ack_in = disp_out_V_data_V_1_state[1'd1];

assign disp_out_V_data_V_1_ack_out = disp_out_TREADY;

assign disp_out_V_data_V_1_load_A = (disp_out_V_data_V_1_state_cmp_full & ~disp_out_V_data_V_1_sel_wr);

assign disp_out_V_data_V_1_load_B = (disp_out_V_data_V_1_sel_wr & disp_out_V_data_V_1_state_cmp_full);

assign disp_out_V_data_V_1_sel = disp_out_V_data_V_1_sel_rd;

assign disp_out_V_data_V_1_state_cmp_full = ((disp_out_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign disp_out_V_data_V_1_vld_out = disp_out_V_data_V_1_state[1'd0];

assign disp_out_V_dest_V_1_ack_in = disp_out_V_dest_V_1_state[1'd1];

assign disp_out_V_dest_V_1_ack_out = disp_out_TREADY;

assign disp_out_V_dest_V_1_data_out = 1'd0;

assign disp_out_V_dest_V_1_sel = disp_out_V_dest_V_1_sel_rd;

assign disp_out_V_dest_V_1_vld_out = disp_out_V_dest_V_1_state[1'd0];

assign disp_out_V_id_V_1_ack_in = disp_out_V_id_V_1_state[1'd1];

assign disp_out_V_id_V_1_ack_out = disp_out_TREADY;

assign disp_out_V_id_V_1_data_out = 1'd0;

assign disp_out_V_id_V_1_sel = disp_out_V_id_V_1_sel_rd;

assign disp_out_V_id_V_1_vld_out = disp_out_V_id_V_1_state[1'd0];

assign disp_out_V_keep_V_1_ack_in = disp_out_V_keep_V_1_state[1'd1];

assign disp_out_V_keep_V_1_ack_out = disp_out_TREADY;

assign disp_out_V_keep_V_1_data_out = 2'd3;

assign disp_out_V_keep_V_1_sel = disp_out_V_keep_V_1_sel_rd;

assign disp_out_V_keep_V_1_vld_out = disp_out_V_keep_V_1_state[1'd0];

assign disp_out_V_last_V_1_ack_in = disp_out_V_last_V_1_state[1'd1];

assign disp_out_V_last_V_1_ack_out = disp_out_TREADY;

assign disp_out_V_last_V_1_load_A = (disp_out_V_last_V_1_state_cmp_full & ~disp_out_V_last_V_1_sel_wr);

assign disp_out_V_last_V_1_load_B = (disp_out_V_last_V_1_sel_wr & disp_out_V_last_V_1_state_cmp_full);

assign disp_out_V_last_V_1_sel = disp_out_V_last_V_1_sel_rd;

assign disp_out_V_last_V_1_state_cmp_full = ((disp_out_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign disp_out_V_last_V_1_vld_out = disp_out_V_last_V_1_state[1'd0];

assign disp_out_V_strb_V_1_ack_in = disp_out_V_strb_V_1_state[1'd1];

assign disp_out_V_strb_V_1_ack_out = disp_out_TREADY;

assign disp_out_V_strb_V_1_data_out = 2'd0;

assign disp_out_V_strb_V_1_sel = disp_out_V_strb_V_1_sel_rd;

assign disp_out_V_strb_V_1_vld_out = disp_out_V_strb_V_1_state[1'd0];

assign disp_out_V_user_V_1_ack_in = disp_out_V_user_V_1_state[1'd1];

assign disp_out_V_user_V_1_ack_out = disp_out_TREADY;

assign disp_out_V_user_V_1_load_A = (disp_out_V_user_V_1_state_cmp_full & ~disp_out_V_user_V_1_sel_wr);

assign disp_out_V_user_V_1_load_B = (disp_out_V_user_V_1_sel_wr & disp_out_V_user_V_1_state_cmp_full);

assign disp_out_V_user_V_1_sel = disp_out_V_user_V_1_sel_rd;

assign disp_out_V_user_V_1_state_cmp_full = ((disp_out_V_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign disp_out_V_user_V_1_vld_out = disp_out_V_user_V_1_state[1'd0];

assign exitcond3_i_i_fu_187_p2 = ((p_i_i_reg_146 == tmp_fu_168_p1) ? 1'b1 : 1'b0);

assign exitcond_i_i_fu_198_p2 = ((p_3_i_i_reg_157 == tmp_115_fu_172_p1) ? 1'b1 : 1'b0);

assign i_V_fu_192_p2 = (p_i_i_reg_146 + 10'd1);

assign j_V_fu_203_p2 = (p_3_i_i_reg_157 + 11'd1);

assign r_V_fu_176_p2 = ($signed(11'd2047) + $signed(tmp_115_fu_172_p1));

assign tmp_115_fu_172_p1 = cols[10:0];

assign tmp_fu_168_p1 = rows[9:0];

endmodule //Mat2AXIvideo
