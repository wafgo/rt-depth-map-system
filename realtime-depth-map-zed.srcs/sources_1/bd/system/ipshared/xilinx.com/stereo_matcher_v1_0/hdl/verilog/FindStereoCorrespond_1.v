// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module FindStereoCorrespond_1 (
        rows,
        cols,
        img_left_data_stream_dout,
        img_left_data_stream_empty_n,
        img_left_data_stream_read,
        img_right_data_strea_dout,
        img_right_data_strea_empty_n,
        img_right_data_strea_read,
        disp_img_data_stream_din,
        disp_img_data_stream_full_n,
        disp_img_data_stream_write,
        ap_clk,
        ap_rst,
        rows_ap_vld,
        cols_ap_vld,
        ap_done,
        ap_start,
        ap_ready,
        ap_idle,
        ap_continue
);


input  [15:0] rows;
input  [15:0] cols;
input  [7:0] img_left_data_stream_dout;
input   img_left_data_stream_empty_n;
output   img_left_data_stream_read;
input  [7:0] img_right_data_strea_dout;
input   img_right_data_strea_empty_n;
output   img_right_data_strea_read;
output  [15:0] disp_img_data_stream_din;
input   disp_img_data_stream_full_n;
output   disp_img_data_stream_write;
input   ap_clk;
input   ap_rst;
input   rows_ap_vld;
input   cols_ap_vld;
output   ap_done;
input   ap_start;
output   ap_ready;
output   ap_idle;
input   ap_continue;

wire    FindStereoCorrespond_U0_ap_start;
wire    FindStereoCorrespond_U0_start_full_n;
wire    FindStereoCorrespond_U0_ap_done;
wire    FindStereoCorrespond_U0_ap_continue;
wire    FindStereoCorrespond_U0_ap_idle;
wire    FindStereoCorrespond_U0_ap_ready;
wire    FindStereoCorrespond_U0_start_out;
wire    FindStereoCorrespond_U0_start_write;
wire   [9:0] FindStereoCorrespond_U0_p_left_0_rows_V_i_i_c_i_din;
wire    FindStereoCorrespond_U0_p_left_0_rows_V_i_i_c_i_write;
wire   [10:0] FindStereoCorrespond_U0_p_left_0_cols_V_i_i_c_i_din;
wire    FindStereoCorrespond_U0_p_left_0_cols_V_i_i_c_i_write;
wire   [11:0] FindStereoCorrespond_U0_ap_return_0;
wire   [11:0] FindStereoCorrespond_U0_ap_return_1;
wire   [11:0] FindStereoCorrespond_U0_ap_return_2;
wire   [11:0] FindStereoCorrespond_U0_ap_return_3;
wire    ap_channel_done_right_sobel_cols_V_i;
wire    right_sobel_cols_V_i_full_n;
reg    ap_sync_reg_channel_write_right_sobel_cols_V_i;
wire    ap_sync_channel_write_right_sobel_cols_V_i;
wire    ap_channel_done_right_sobel_rows_V_i;
wire    right_sobel_rows_V_i_full_n;
reg    ap_sync_reg_channel_write_right_sobel_rows_V_i;
wire    ap_sync_channel_write_right_sobel_rows_V_i;
wire    ap_channel_done_left_sobel_cols_V_i_s;
wire    left_sobel_cols_V_i_s_full_n;
reg    ap_sync_reg_channel_write_left_sobel_cols_V_i_s;
wire    ap_sync_channel_write_left_sobel_cols_V_i_s;
wire    ap_channel_done_left_sobel_rows_V_i_s;
wire    left_sobel_rows_V_i_s_full_n;
reg    ap_sync_reg_channel_write_left_sobel_rows_V_i_s;
wire    ap_sync_channel_write_left_sobel_rows_V_i_s;
wire    Sobel9_U0_ap_start;
wire    Sobel9_U0_ap_done;
wire    Sobel9_U0_ap_continue;
wire    Sobel9_U0_ap_idle;
wire    Sobel9_U0_ap_ready;
wire    Sobel9_U0_img_left_data_stream_read;
wire   [15:0] Sobel9_U0_left_sobel_data_stre_i_din;
wire    Sobel9_U0_left_sobel_data_stre_i_write;
wire    Sobel_U0_ap_start;
wire    Sobel_U0_ap_done;
wire    Sobel_U0_ap_continue;
wire    Sobel_U0_ap_idle;
wire    Sobel_U0_ap_ready;
wire    Sobel_U0_img_right_data_strea_read;
wire   [15:0] Sobel_U0_right_sobel_data_str_i_din;
wire    Sobel_U0_right_sobel_data_str_i_write;
wire    Clip94_U0_ap_start;
wire    Clip94_U0_ap_done;
wire    Clip94_U0_ap_continue;
wire    Clip94_U0_ap_idle;
wire    Clip94_U0_ap_ready;
wire    Clip94_U0_dst_data_stream_V_read;
wire   [7:0] Clip94_U0_cap_din;
wire    Clip94_U0_cap_write;
wire    Clip_U0_ap_start;
wire    Clip_U0_ap_done;
wire    Clip_U0_ap_continue;
wire    Clip_U0_ap_idle;
wire    Clip_U0_ap_ready;
wire    Clip_U0_src_data_stream_V_read;
wire   [7:0] Clip_U0_dst_data_stream_V_din;
wire    Clip_U0_dst_data_stream_V_write;
wire    SADBlockMatching_U0_ap_start;
wire    SADBlockMatching_U0_ap_done;
wire    SADBlockMatching_U0_ap_continue;
wire    SADBlockMatching_U0_ap_idle;
wire    SADBlockMatching_U0_ap_ready;
wire    SADBlockMatching_U0_left_rows_V_read;
wire    SADBlockMatching_U0_left_cols_V_read;
wire    SADBlockMatching_U0_left_data_stream_V_read;
wire    SADBlockMatching_U0_right_data_stream_V_read;
wire   [15:0] SADBlockMatching_U0_disp_data_stream_V_din;
wire    SADBlockMatching_U0_disp_data_stream_V_write;
wire    ap_sync_continue;
wire    p_left_0_rows_V_i_i_c_full_n;
wire   [9:0] p_left_0_rows_V_i_i_c_dout;
wire    p_left_0_rows_V_i_i_c_empty_n;
wire    p_left_0_cols_V_i_i_c_full_n;
wire   [10:0] p_left_0_cols_V_i_i_c_dout;
wire    p_left_0_cols_V_i_i_c_empty_n;
wire   [11:0] left_sobel_rows_V_i_s_dout;
wire    left_sobel_rows_V_i_s_empty_n;
wire   [11:0] left_sobel_cols_V_i_s_dout;
wire    left_sobel_cols_V_i_s_empty_n;
wire   [11:0] right_sobel_rows_V_i_dout;
wire    right_sobel_rows_V_i_empty_n;
wire   [11:0] right_sobel_cols_V_i_dout;
wire    right_sobel_cols_V_i_empty_n;
wire    left_sobel_data_stre_full_n;
wire   [15:0] left_sobel_data_stre_dout;
wire    left_sobel_data_stre_empty_n;
wire    right_sobel_data_str_full_n;
wire   [15:0] right_sobel_data_str_dout;
wire    right_sobel_data_str_empty_n;
wire    p_left_0_data_stream_s_full_n;
wire   [7:0] p_left_0_data_stream_s_dout;
wire    p_left_0_data_stream_s_empty_n;
wire    p_right_0_data_stream_full_n;
wire   [7:0] p_right_0_data_stream_dout;
wire    p_right_0_data_stream_empty_n;
wire    ap_sync_done;
wire    ap_sync_ready;
reg    ap_sync_reg_FindStereoCorrespond_U0_ap_ready;
wire    ap_sync_FindStereoCorrespond_U0_ap_ready;
reg   [1:0] FindStereoCorrespond_U0_ap_ready_count;
reg    ap_sync_reg_Sobel9_U0_ap_ready;
wire    ap_sync_Sobel9_U0_ap_ready;
reg   [1:0] Sobel9_U0_ap_ready_count;
reg    ap_sync_reg_Sobel_U0_ap_ready;
wire    ap_sync_Sobel_U0_ap_ready;
reg   [1:0] Sobel_U0_ap_ready_count;
wire   [0:0] start_for_SADBlockMatching_U0_din;
wire    start_for_SADBlockMatching_U0_full_n;
wire   [0:0] start_for_SADBlockMatching_U0_dout;
wire    start_for_SADBlockMatching_U0_empty_n;
wire    Sobel9_U0_start_full_n;
wire    Sobel9_U0_start_write;
wire    Sobel_U0_start_full_n;
wire    Sobel_U0_start_write;
wire    Clip94_U0_start_full_n;
wire    Clip94_U0_start_write;
wire    Clip_U0_start_full_n;
wire    Clip_U0_start_write;
wire    SADBlockMatching_U0_start_full_n;
wire    SADBlockMatching_U0_start_write;

// power-on initialization
initial begin
#0 ap_sync_reg_channel_write_right_sobel_cols_V_i = 1'b0;
#0 ap_sync_reg_channel_write_right_sobel_rows_V_i = 1'b0;
#0 ap_sync_reg_channel_write_left_sobel_cols_V_i_s = 1'b0;
#0 ap_sync_reg_channel_write_left_sobel_rows_V_i_s = 1'b0;
#0 ap_sync_reg_FindStereoCorrespond_U0_ap_ready = 1'b0;
#0 FindStereoCorrespond_U0_ap_ready_count = 2'd0;
#0 ap_sync_reg_Sobel9_U0_ap_ready = 1'b0;
#0 Sobel9_U0_ap_ready_count = 2'd0;
#0 ap_sync_reg_Sobel_U0_ap_ready = 1'b0;
#0 Sobel_U0_ap_ready_count = 2'd0;
end

FindStereoCorrespond FindStereoCorrespond_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(FindStereoCorrespond_U0_ap_start),
    .start_full_n(FindStereoCorrespond_U0_start_full_n),
    .ap_done(FindStereoCorrespond_U0_ap_done),
    .ap_continue(FindStereoCorrespond_U0_ap_continue),
    .ap_idle(FindStereoCorrespond_U0_ap_idle),
    .ap_ready(FindStereoCorrespond_U0_ap_ready),
    .start_out(FindStereoCorrespond_U0_start_out),
    .start_write(FindStereoCorrespond_U0_start_write),
    .rows(rows),
    .cols(cols),
    .p_left_0_rows_V_i_i_c_i_din(FindStereoCorrespond_U0_p_left_0_rows_V_i_i_c_i_din),
    .p_left_0_rows_V_i_i_c_i_full_n(p_left_0_rows_V_i_i_c_full_n),
    .p_left_0_rows_V_i_i_c_i_write(FindStereoCorrespond_U0_p_left_0_rows_V_i_i_c_i_write),
    .p_left_0_cols_V_i_i_c_i_din(FindStereoCorrespond_U0_p_left_0_cols_V_i_i_c_i_din),
    .p_left_0_cols_V_i_i_c_i_full_n(p_left_0_cols_V_i_i_c_full_n),
    .p_left_0_cols_V_i_i_c_i_write(FindStereoCorrespond_U0_p_left_0_cols_V_i_i_c_i_write),
    .ap_return_0(FindStereoCorrespond_U0_ap_return_0),
    .ap_return_1(FindStereoCorrespond_U0_ap_return_1),
    .ap_return_2(FindStereoCorrespond_U0_ap_return_2),
    .ap_return_3(FindStereoCorrespond_U0_ap_return_3)
);

Sobel9 Sobel9_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(Sobel9_U0_ap_start),
    .ap_done(Sobel9_U0_ap_done),
    .ap_continue(Sobel9_U0_ap_continue),
    .ap_idle(Sobel9_U0_ap_idle),
    .ap_ready(Sobel9_U0_ap_ready),
    .rows(rows),
    .cols(cols),
    .img_left_data_stream_dout(img_left_data_stream_dout),
    .img_left_data_stream_empty_n(img_left_data_stream_empty_n),
    .img_left_data_stream_read(Sobel9_U0_img_left_data_stream_read),
    .left_sobel_data_stre_i_din(Sobel9_U0_left_sobel_data_stre_i_din),
    .left_sobel_data_stre_i_full_n(left_sobel_data_stre_full_n),
    .left_sobel_data_stre_i_write(Sobel9_U0_left_sobel_data_stre_i_write)
);

Sobel Sobel_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(Sobel_U0_ap_start),
    .ap_done(Sobel_U0_ap_done),
    .ap_continue(Sobel_U0_ap_continue),
    .ap_idle(Sobel_U0_ap_idle),
    .ap_ready(Sobel_U0_ap_ready),
    .rows(rows),
    .cols(cols),
    .img_right_data_strea_dout(img_right_data_strea_dout),
    .img_right_data_strea_empty_n(img_right_data_strea_empty_n),
    .img_right_data_strea_read(Sobel_U0_img_right_data_strea_read),
    .right_sobel_data_str_i_din(Sobel_U0_right_sobel_data_str_i_din),
    .right_sobel_data_str_i_full_n(right_sobel_data_str_full_n),
    .right_sobel_data_str_i_write(Sobel_U0_right_sobel_data_str_i_write)
);

Clip94 Clip94_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(Clip94_U0_ap_start),
    .ap_done(Clip94_U0_ap_done),
    .ap_continue(Clip94_U0_ap_continue),
    .ap_idle(Clip94_U0_ap_idle),
    .ap_ready(Clip94_U0_ap_ready),
    .p_read(left_sobel_rows_V_i_s_dout),
    .p_read1(left_sobel_cols_V_i_s_dout),
    .dst_data_stream_V_dout(left_sobel_data_stre_dout),
    .dst_data_stream_V_empty_n(left_sobel_data_stre_empty_n),
    .dst_data_stream_V_read(Clip94_U0_dst_data_stream_V_read),
    .cap_din(Clip94_U0_cap_din),
    .cap_full_n(p_left_0_data_stream_s_full_n),
    .cap_write(Clip94_U0_cap_write)
);

Clip Clip_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(Clip_U0_ap_start),
    .ap_done(Clip_U0_ap_done),
    .ap_continue(Clip_U0_ap_continue),
    .ap_idle(Clip_U0_ap_idle),
    .ap_ready(Clip_U0_ap_ready),
    .src_rows_V_read(right_sobel_rows_V_i_dout),
    .src_cols_V_read(right_sobel_cols_V_i_dout),
    .src_data_stream_V_dout(right_sobel_data_str_dout),
    .src_data_stream_V_empty_n(right_sobel_data_str_empty_n),
    .src_data_stream_V_read(Clip_U0_src_data_stream_V_read),
    .dst_data_stream_V_din(Clip_U0_dst_data_stream_V_din),
    .dst_data_stream_V_full_n(p_right_0_data_stream_full_n),
    .dst_data_stream_V_write(Clip_U0_dst_data_stream_V_write)
);

SADBlockMatching SADBlockMatching_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(SADBlockMatching_U0_ap_start),
    .ap_done(SADBlockMatching_U0_ap_done),
    .ap_continue(SADBlockMatching_U0_ap_continue),
    .ap_idle(SADBlockMatching_U0_ap_idle),
    .ap_ready(SADBlockMatching_U0_ap_ready),
    .left_rows_V_dout(p_left_0_rows_V_i_i_c_dout),
    .left_rows_V_empty_n(p_left_0_rows_V_i_i_c_empty_n),
    .left_rows_V_read(SADBlockMatching_U0_left_rows_V_read),
    .left_cols_V_dout(p_left_0_cols_V_i_i_c_dout),
    .left_cols_V_empty_n(p_left_0_cols_V_i_i_c_empty_n),
    .left_cols_V_read(SADBlockMatching_U0_left_cols_V_read),
    .left_data_stream_V_dout(p_left_0_data_stream_s_dout),
    .left_data_stream_V_empty_n(p_left_0_data_stream_s_empty_n),
    .left_data_stream_V_read(SADBlockMatching_U0_left_data_stream_V_read),
    .right_data_stream_V_dout(p_right_0_data_stream_dout),
    .right_data_stream_V_empty_n(p_right_0_data_stream_empty_n),
    .right_data_stream_V_read(SADBlockMatching_U0_right_data_stream_V_read),
    .disp_data_stream_V_din(SADBlockMatching_U0_disp_data_stream_V_din),
    .disp_data_stream_V_full_n(disp_img_data_stream_full_n),
    .disp_data_stream_V_write(SADBlockMatching_U0_disp_data_stream_V_write)
);

fifo_w10_d2_A p_left_0_rows_V_i_i_c_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(FindStereoCorrespond_U0_p_left_0_rows_V_i_i_c_i_din),
    .if_full_n(p_left_0_rows_V_i_i_c_full_n),
    .if_write(FindStereoCorrespond_U0_p_left_0_rows_V_i_i_c_i_write),
    .if_dout(p_left_0_rows_V_i_i_c_dout),
    .if_empty_n(p_left_0_rows_V_i_i_c_empty_n),
    .if_read(SADBlockMatching_U0_left_rows_V_read)
);

fifo_w11_d2_A p_left_0_cols_V_i_i_c_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(FindStereoCorrespond_U0_p_left_0_cols_V_i_i_c_i_din),
    .if_full_n(p_left_0_cols_V_i_i_c_full_n),
    .if_write(FindStereoCorrespond_U0_p_left_0_cols_V_i_i_c_i_write),
    .if_dout(p_left_0_cols_V_i_i_c_dout),
    .if_empty_n(p_left_0_cols_V_i_i_c_empty_n),
    .if_read(SADBlockMatching_U0_left_cols_V_read)
);

fifo_w12_d2_A left_sobel_rows_V_i_s_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(FindStereoCorrespond_U0_ap_return_0),
    .if_full_n(left_sobel_rows_V_i_s_full_n),
    .if_write(ap_channel_done_left_sobel_rows_V_i_s),
    .if_dout(left_sobel_rows_V_i_s_dout),
    .if_empty_n(left_sobel_rows_V_i_s_empty_n),
    .if_read(Clip94_U0_ap_ready)
);

fifo_w12_d2_A left_sobel_cols_V_i_s_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(FindStereoCorrespond_U0_ap_return_1),
    .if_full_n(left_sobel_cols_V_i_s_full_n),
    .if_write(ap_channel_done_left_sobel_cols_V_i_s),
    .if_dout(left_sobel_cols_V_i_s_dout),
    .if_empty_n(left_sobel_cols_V_i_s_empty_n),
    .if_read(Clip94_U0_ap_ready)
);

fifo_w12_d2_A right_sobel_rows_V_i_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(FindStereoCorrespond_U0_ap_return_2),
    .if_full_n(right_sobel_rows_V_i_full_n),
    .if_write(ap_channel_done_right_sobel_rows_V_i),
    .if_dout(right_sobel_rows_V_i_dout),
    .if_empty_n(right_sobel_rows_V_i_empty_n),
    .if_read(Clip_U0_ap_ready)
);

fifo_w12_d2_A right_sobel_cols_V_i_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(FindStereoCorrespond_U0_ap_return_3),
    .if_full_n(right_sobel_cols_V_i_full_n),
    .if_write(ap_channel_done_right_sobel_cols_V_i),
    .if_dout(right_sobel_cols_V_i_dout),
    .if_empty_n(right_sobel_cols_V_i_empty_n),
    .if_read(Clip_U0_ap_ready)
);

fifo_w16_d1_A left_sobel_data_stre_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Sobel9_U0_left_sobel_data_stre_i_din),
    .if_full_n(left_sobel_data_stre_full_n),
    .if_write(Sobel9_U0_left_sobel_data_stre_i_write),
    .if_dout(left_sobel_data_stre_dout),
    .if_empty_n(left_sobel_data_stre_empty_n),
    .if_read(Clip94_U0_dst_data_stream_V_read)
);

fifo_w16_d1_A right_sobel_data_str_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Sobel_U0_right_sobel_data_str_i_din),
    .if_full_n(right_sobel_data_str_full_n),
    .if_write(Sobel_U0_right_sobel_data_str_i_write),
    .if_dout(right_sobel_data_str_dout),
    .if_empty_n(right_sobel_data_str_empty_n),
    .if_read(Clip_U0_src_data_stream_V_read)
);

fifo_w8_d1_A p_left_0_data_stream_s_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Clip94_U0_cap_din),
    .if_full_n(p_left_0_data_stream_s_full_n),
    .if_write(Clip94_U0_cap_write),
    .if_dout(p_left_0_data_stream_s_dout),
    .if_empty_n(p_left_0_data_stream_s_empty_n),
    .if_read(SADBlockMatching_U0_left_data_stream_V_read)
);

fifo_w8_d1_A p_right_0_data_stream_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Clip_U0_dst_data_stream_V_din),
    .if_full_n(p_right_0_data_stream_full_n),
    .if_write(Clip_U0_dst_data_stream_V_write),
    .if_dout(p_right_0_data_stream_dout),
    .if_empty_n(p_right_0_data_stream_empty_n),
    .if_read(SADBlockMatching_U0_right_data_stream_V_read)
);

start_for_SADBlocPgM start_for_SADBlocPgM_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_SADBlockMatching_U0_din),
    .if_full_n(start_for_SADBlockMatching_U0_full_n),
    .if_write(FindStereoCorrespond_U0_start_write),
    .if_dout(start_for_SADBlockMatching_U0_dout),
    .if_empty_n(start_for_SADBlockMatching_U0_empty_n),
    .if_read(SADBlockMatching_U0_ap_ready)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_FindStereoCorrespond_U0_ap_ready <= 1'b0;
    end else begin
        if ((1'b1 == (ap_start & ap_sync_ready))) begin
            ap_sync_reg_FindStereoCorrespond_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_FindStereoCorrespond_U0_ap_ready <= ap_sync_FindStereoCorrespond_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_Sobel9_U0_ap_ready <= 1'b0;
    end else begin
        if ((1'b1 == (ap_start & ap_sync_ready))) begin
            ap_sync_reg_Sobel9_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_Sobel9_U0_ap_ready <= ap_sync_Sobel9_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_Sobel_U0_ap_ready <= 1'b0;
    end else begin
        if ((1'b1 == (ap_start & ap_sync_ready))) begin
            ap_sync_reg_Sobel_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_Sobel_U0_ap_ready <= ap_sync_Sobel_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_left_sobel_cols_V_i_s <= 1'b0;
    end else begin
        if ((1'b1 == (FindStereoCorrespond_U0_ap_done & FindStereoCorrespond_U0_ap_continue))) begin
            ap_sync_reg_channel_write_left_sobel_cols_V_i_s <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_left_sobel_cols_V_i_s <= ap_sync_channel_write_left_sobel_cols_V_i_s;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_left_sobel_rows_V_i_s <= 1'b0;
    end else begin
        if ((1'b1 == (FindStereoCorrespond_U0_ap_done & FindStereoCorrespond_U0_ap_continue))) begin
            ap_sync_reg_channel_write_left_sobel_rows_V_i_s <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_left_sobel_rows_V_i_s <= ap_sync_channel_write_left_sobel_rows_V_i_s;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_right_sobel_cols_V_i <= 1'b0;
    end else begin
        if ((1'b1 == (FindStereoCorrespond_U0_ap_done & FindStereoCorrespond_U0_ap_continue))) begin
            ap_sync_reg_channel_write_right_sobel_cols_V_i <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_right_sobel_cols_V_i <= ap_sync_channel_write_right_sobel_cols_V_i;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_right_sobel_rows_V_i <= 1'b0;
    end else begin
        if ((1'b1 == (FindStereoCorrespond_U0_ap_done & FindStereoCorrespond_U0_ap_continue))) begin
            ap_sync_reg_channel_write_right_sobel_rows_V_i <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_right_sobel_rows_V_i <= ap_sync_channel_write_right_sobel_rows_V_i;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == FindStereoCorrespond_U0_ap_ready) & (1'b1 == ap_sync_ready))) begin
        FindStereoCorrespond_U0_ap_ready_count <= (FindStereoCorrespond_U0_ap_ready_count - 2'd1);
    end else if (((FindStereoCorrespond_U0_ap_ready == 1'b1) & (1'b0 == ap_sync_ready))) begin
        FindStereoCorrespond_U0_ap_ready_count <= (FindStereoCorrespond_U0_ap_ready_count + 2'd1);
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sync_ready) & (1'b0 == Sobel9_U0_ap_ready))) begin
        Sobel9_U0_ap_ready_count <= (Sobel9_U0_ap_ready_count - 2'd1);
    end else if (((1'b0 == ap_sync_ready) & (1'b1 == Sobel9_U0_ap_ready))) begin
        Sobel9_U0_ap_ready_count <= (Sobel9_U0_ap_ready_count + 2'd1);
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sync_ready) & (1'b0 == Sobel_U0_ap_ready))) begin
        Sobel_U0_ap_ready_count <= (Sobel_U0_ap_ready_count - 2'd1);
    end else if (((1'b0 == ap_sync_ready) & (1'b1 == Sobel_U0_ap_ready))) begin
        Sobel_U0_ap_ready_count <= (Sobel_U0_ap_ready_count + 2'd1);
    end
end

assign Clip94_U0_ap_continue = 1'b1;

assign Clip94_U0_ap_start = (left_sobel_rows_V_i_s_empty_n & left_sobel_cols_V_i_s_empty_n);

assign Clip94_U0_start_full_n = 1'b0;

assign Clip94_U0_start_write = 1'b0;

assign Clip_U0_ap_continue = 1'b1;

assign Clip_U0_ap_start = (right_sobel_rows_V_i_empty_n & right_sobel_cols_V_i_empty_n);

assign Clip_U0_start_full_n = 1'b0;

assign Clip_U0_start_write = 1'b0;

assign FindStereoCorrespond_U0_ap_continue = (ap_sync_channel_write_right_sobel_cols_V_i & ap_sync_channel_write_right_sobel_rows_V_i & ap_sync_channel_write_left_sobel_cols_V_i_s & ap_sync_channel_write_left_sobel_rows_V_i_s);

assign FindStereoCorrespond_U0_ap_start = (ap_start & (ap_sync_reg_FindStereoCorrespond_U0_ap_ready ^ 1'b1));

assign FindStereoCorrespond_U0_start_full_n = (1'b0 | start_for_SADBlockMatching_U0_full_n);

assign SADBlockMatching_U0_ap_continue = ap_continue;

assign SADBlockMatching_U0_ap_start = start_for_SADBlockMatching_U0_empty_n;

assign SADBlockMatching_U0_start_full_n = 1'b0;

assign SADBlockMatching_U0_start_write = 1'b0;

assign Sobel9_U0_ap_continue = 1'b1;

assign Sobel9_U0_ap_start = (ap_start & (ap_sync_reg_Sobel9_U0_ap_ready ^ 1'b1));

assign Sobel9_U0_start_full_n = 1'b0;

assign Sobel9_U0_start_write = 1'b0;

assign Sobel_U0_ap_continue = 1'b1;

assign Sobel_U0_ap_start = (ap_start & (ap_sync_reg_Sobel_U0_ap_ready ^ 1'b1));

assign Sobel_U0_start_full_n = 1'b0;

assign Sobel_U0_start_write = 1'b0;

assign ap_channel_done_left_sobel_cols_V_i_s = (FindStereoCorrespond_U0_ap_done & (ap_sync_reg_channel_write_left_sobel_cols_V_i_s ^ 1'b1));

assign ap_channel_done_left_sobel_rows_V_i_s = (FindStereoCorrespond_U0_ap_done & (ap_sync_reg_channel_write_left_sobel_rows_V_i_s ^ 1'b1));

assign ap_channel_done_right_sobel_cols_V_i = (FindStereoCorrespond_U0_ap_done & (ap_sync_reg_channel_write_right_sobel_cols_V_i ^ 1'b1));

assign ap_channel_done_right_sobel_rows_V_i = (FindStereoCorrespond_U0_ap_done & (ap_sync_reg_channel_write_right_sobel_rows_V_i ^ 1'b1));

assign ap_done = SADBlockMatching_U0_ap_done;

assign ap_idle = (FindStereoCorrespond_U0_ap_idle & Sobel9_U0_ap_idle & Sobel_U0_ap_idle & Clip94_U0_ap_idle & Clip_U0_ap_idle & SADBlockMatching_U0_ap_idle & (left_sobel_rows_V_i_s_empty_n ^ 1'b1) & (left_sobel_cols_V_i_s_empty_n ^ 1'b1) & (right_sobel_rows_V_i_empty_n ^ 1'b1) & (right_sobel_cols_V_i_empty_n ^ 1'b1));

assign ap_ready = ap_sync_ready;

assign ap_sync_FindStereoCorrespond_U0_ap_ready = (FindStereoCorrespond_U0_ap_ready | ap_sync_reg_FindStereoCorrespond_U0_ap_ready);

assign ap_sync_Sobel9_U0_ap_ready = (Sobel9_U0_ap_ready | ap_sync_reg_Sobel9_U0_ap_ready);

assign ap_sync_Sobel_U0_ap_ready = (Sobel_U0_ap_ready | ap_sync_reg_Sobel_U0_ap_ready);

assign ap_sync_channel_write_left_sobel_cols_V_i_s = ((ap_channel_done_left_sobel_cols_V_i_s & left_sobel_cols_V_i_s_full_n) | ap_sync_reg_channel_write_left_sobel_cols_V_i_s);

assign ap_sync_channel_write_left_sobel_rows_V_i_s = ((ap_channel_done_left_sobel_rows_V_i_s & left_sobel_rows_V_i_s_full_n) | ap_sync_reg_channel_write_left_sobel_rows_V_i_s);

assign ap_sync_channel_write_right_sobel_cols_V_i = ((ap_channel_done_right_sobel_cols_V_i & right_sobel_cols_V_i_full_n) | ap_sync_reg_channel_write_right_sobel_cols_V_i);

assign ap_sync_channel_write_right_sobel_rows_V_i = ((ap_channel_done_right_sobel_rows_V_i & right_sobel_rows_V_i_full_n) | ap_sync_reg_channel_write_right_sobel_rows_V_i);

assign ap_sync_continue = ap_continue;

assign ap_sync_done = SADBlockMatching_U0_ap_done;

assign ap_sync_ready = (ap_sync_FindStereoCorrespond_U0_ap_ready & ap_sync_Sobel9_U0_ap_ready & ap_sync_Sobel_U0_ap_ready);

assign disp_img_data_stream_din = SADBlockMatching_U0_disp_data_stream_V_din;

assign disp_img_data_stream_write = SADBlockMatching_U0_disp_data_stream_V_write;

assign img_left_data_stream_read = Sobel9_U0_img_left_data_stream_read;

assign img_right_data_strea_read = Sobel_U0_img_right_data_strea_read;

assign start_for_SADBlockMatching_U0_din = 1'b1;

endmodule //FindStereoCorrespond_1
